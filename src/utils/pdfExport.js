import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'

/**
 * Generate and download a PDF of the fertilizer plan with multi-language support
 * @param {Object} nutrientPlan - The nutrient plan data
 * @param {string} crop - Crop name
 * @param {string} growthStage - Growth stage
 * @param {string} soilType - Soil type
 * @param {Function} translate - Translation function (optional)
 * @param {string} currentLangCode - Current language code (optional)
 */
export const downloadFertilizerPlanPDF = async (nutrientPlan, crop, growthStage, soilType, translate, currentLangCode) => {
  try {
    // If no translate function provided, use identity function
    const translateFn = translate || ((text) => Promise.resolve(text))
    
    // Translate all static labels
    const [
      titleText,
      generatedText,
      cropInfoText,
      cropText,
      growthStageText,
      soilTypeText,
      npkText,
      currentLevelText,
      requiredText,
      sourceText,
      dosageText,
      timingText,
      deficiencyText,
      micronutrientsText,
      statusText,
      recommendationText,
      applicationText,
      organicText,
      quantityText,
      benefitsText,
      warningsText,
      footerText1,
      footerText2,
      footerText3,
      translatedCrop,
      translatedGrowthStage,
      translatedSoilType
    ] = await Promise.all([
      translateFn('Fertilizer Application Plan'),
      translateFn('Generated on'),
      translateFn('Crop Information'),
      translateFn('Crop'),
      translateFn('Growth Stage'),
      translateFn('Soil Type'),
      translateFn('NPK Requirements (Macronutrients)'),
      translateFn('Current Level'),
      translateFn('Required'),
      translateFn('Source'),
      translateFn('Dosage'),
      translateFn('Application Timing'),
      translateFn('Deficiency Symptoms'),
      translateFn('Micronutrients'),
      translateFn('Status'),
      translateFn('Recommendation'),
      translateFn('Application'),
      translateFn('Organic Fertilizer Options'),
      translateFn('Quantity'),
      translateFn('Benefits'),
      translateFn('Important Warnings'),
      translateFn(`This plan is generated by AgroGuard AI for ${crop} at ${growthStage} stage.`),
      translateFn('Always consult with local agricultural experts for best results.'),
      translateFn('For assistance, contact your nearest agricultural extension office'),
      translateFn(crop),
      translateFn(growthStage),
      translateFn(soilType)
    ])
    
    // Translate macronutrients
    const translatedMacros = await Promise.all(
      nutrientPlan.macronutrients.map(async (n) => ({
        ...n,
        name: await translateFn(n.name),
        current: await translateFn(n.current),
        required: await translateFn(n.required),
        source: await translateFn(n.source),
        dosage: await translateFn(n.dosage),
        timing: await translateFn(n.timing),
        deficiencySymptoms: await Promise.all(n.deficiencySymptoms.map(s => translateFn(s)))
      }))
    )
    
    // Translate micronutrients
    const translatedMicros = await Promise.all(
      nutrientPlan.micronutrients.map(async (n) => ({
        ...n,
        name: await translateFn(n.name),
        status: await translateFn(n.status),
        recommendation: await translateFn(n.recommendation),
        application: await translateFn(n.application)
      }))
    )
    
    // Translate organic options
    const translatedOrganic = await Promise.all(
      nutrientPlan.organicOptions.map(async (o) => ({
        ...o,
        name: await translateFn(o.name),
        quantity: await translateFn(o.quantity),
        benefits: await Promise.all(o.benefits.map(b => translateFn(b))),
        application: await translateFn(o.application)
      }))
    )
    
    // Translate warnings
    const translatedWarnings = await Promise.all(
      nutrientPlan.warnings.map(w => translateFn(w))
    )
    
    const currentDate = new Date().toLocaleDateString(currentLangCode || 'en-IN')
    
    // Create a temporary container for PDF content
    const container = document.createElement('div')
    container.style.position = 'absolute'
    container.style.left = '-9999px'
    container.style.width = '800px'
    container.style.padding = '40px'
    container.style.backgroundColor = 'white'
    container.style.fontFamily = 'Arial, sans-serif'
    
    // Build the HTML content with translated text
    container.innerHTML = `
      <div style="color: #000;">
        <div style="text-align: center; margin-bottom: 30px; border-bottom: 3px solid #16a34a; padding-bottom: 20px;">
          <h1 style="color: #16a34a; margin: 0; font-size: 32px;">üå± ${titleText}</h1>
          <p style="color: #666; margin-top: 10px; font-size: 14px;">${generatedText} ${currentDate}</p>
        </div>
        
        <div style="background: #f0fdf4; padding: 20px; border-radius: 8px; margin-bottom: 25px;">
          <h2 style="color: #16a34a; margin-top: 0; font-size: 20px;">${cropInfoText}</h2>
          <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px;">
            <div>
              <strong style="color: #16a34a;">${cropText}:</strong><br/>
              <span style="font-size: 16px;">${translatedCrop}</span>
            </div>
            <div>
              <strong style="color: #16a34a;">${growthStageText}:</strong><br/>
              <span style="font-size: 16px;">${translatedGrowthStage}</span>
            </div>
            <div>
              <strong style="color: #16a34a;">${soilTypeText}:</strong><br/>
              <span style="font-size: 16px;">${translatedSoilType}</span>
            </div>
          </div>
        </div>
        
        <div style="margin-bottom: 25px;">
          <h2 style="color: #16a34a; border-bottom: 2px solid #16a34a; padding-bottom: 10px;">${npkText}</h2>
          ${translatedMacros.map(nutrient => `
            <div style="background: #f9fafb; padding: 15px; margin-bottom: 15px; border-left: 4px solid #16a34a; border-radius: 4px;">
              <h3 style="color: #000; margin: 0 0 10px 0; font-size: 18px;">${nutrient.name}</h3>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 10px;">
                <div>
                  <strong>${currentLevelText}:</strong> ${nutrient.current}<br/>
                  <strong>${requiredText}:</strong> ${nutrient.required}
                </div>
                <div>
                  <strong>${sourceText}:</strong> ${nutrient.source}<br/>
                  <strong>${dosageText}:</strong> ${nutrient.dosage}
                </div>
              </div>
              <div style="background: white; padding: 10px; border-radius: 4px; margin-bottom: 10px;">
                <strong style="color: #16a34a;">‚è∞ ${timingText}:</strong><br/>
                ${nutrient.timing}
              </div>
              <div style="background: #fef2f2; padding: 10px; border-radius: 4px;">
                <strong style="color: #dc2626;">‚ö†Ô∏è ${deficiencyText}:</strong><br/>
                ${nutrient.deficiencySymptoms.map(s => `‚Ä¢ ${s}`).join('<br/>')}
              </div>
            </div>
          `).join('')}
        </div>
        
        <div style="margin-bottom: 25px; page-break-before: always;">
          <h2 style="color: #16a34a; border-bottom: 2px solid #16a34a; padding-bottom: 10px;">${micronutrientsText}</h2>
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
            ${translatedMicros.map(nutrient => `
              <div style="background: #f0f9ff; padding: 15px; border-radius: 4px; border: 1px solid #0ea5e9;">
                <h3 style="color: #000; margin: 0 0 8px 0; font-size: 16px;">${nutrient.name}</h3>
                <div style="background: ${
                  nutrient.status.toLowerCase().includes('deficient') || nutrient.status.toLowerCase().includes('‡§ï‡§Æ‡•Ä') ? '#fee' : 
                  nutrient.status.toLowerCase().includes('low') || nutrient.status.toLowerCase().includes('‡§ï‡§Æ') ? '#fef3c7' : '#d1fae5'
                }; padding: 5px 10px; border-radius: 4px; display: inline-block; margin-bottom: 8px;">
                  <strong>${statusText}:</strong> ${nutrient.status}
                </div>
                <p style="margin: 8px 0; font-size: 13px;">
                  <strong>${recommendationText}:</strong> ${nutrient.recommendation}
                </p>
                <p style="margin: 8px 0; font-size: 13px;">
                  <strong>${applicationText}:</strong> ${nutrient.application}
                </p>
              </div>
            `).join('')}
          </div>
        </div>
        
        <div style="margin-bottom: 25px;">
          <h2 style="color: #16a34a; border-bottom: 2px solid #16a34a; padding-bottom: 10px;">üåø ${organicText}</h2>
          ${translatedOrganic.map(option => `
            <div style="background: #f0fdf4; padding: 15px; margin-bottom: 15px; border-radius: 4px; border: 2px solid #22c55e;">
              <h3 style="color: #16a34a; margin: 0 0 8px 0; font-size: 16px;">${option.name}</h3>
              <p style="font-size: 14px; margin: 8px 0;"><strong>${quantityText}:</strong> ${option.quantity}</p>
              <p style="font-size: 13px; margin: 8px 0;"><strong>${benefitsText}:</strong></p>
              ${option.benefits.map(b => `<div style="margin-left: 15px;">‚úì ${b}</div>`).join('')}
              <p style="font-size: 13px; margin-top: 8px;"><strong>${applicationText}:</strong> ${option.application}</p>
            </div>
          `).join('')}
        </div>
        
        <div style="background: #fef3c7; padding: 20px; border-left: 4px solid #f59e0b; border-radius: 4px;">
          <h2 style="color: #92400e; margin-top: 0; font-size: 18px;">‚ö†Ô∏è ${warningsText}</h2>
          ${translatedWarnings.map(w => `<div style="margin: 8px 0; color: #78350f;">‚Ä¢ ${w}</div>`).join('')}
        </div>
        
        <div style="margin-top: 30px; padding-top: 20px; border-top: 2px solid #16a34a; text-align: center; color: #666; font-size: 12px;">
          <p>${footerText1}</p>
          <p>${footerText2}</p>
          <p style="margin-top: 10px; color: #16a34a; font-weight: bold;">üìû ${footerText3}</p>
        </div>
      </div>
    `
    
    document.body.appendChild(container)
    
    // Convert to canvas
    const canvas = await html2canvas(container, {
      scale: 2,
      useCORS: true,
      logging: false,
      backgroundColor: '#ffffff'
    })
    
    // Remove temporary container
    document.body.removeChild(container)
    
    // Create PDF
    const imgWidth = 210 // A4 width in mm
    const pageHeight = 297 // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width
    let heightLeft = imgHeight
    let position = 0
    
    const pdf = new jsPDF('p', 'mm', 'a4')
    const imgData = canvas.toDataURL('image/png')
    
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
    heightLeft -= pageHeight
    
    while (heightLeft >= 0) {
      position = heightLeft - imgHeight
      pdf.addPage()
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
      heightLeft -= pageHeight
    }
    
    // Download the PDF
    const fileName = `Fertilizer_Plan_${crop}_${new Date().toLocaleDateString('en-IN').replace(/\//g, '-')}.pdf`
    pdf.save(fileName)
    
    return true
  } catch (error) {
    console.error('Error generating PDF:', error)
    throw new Error('Failed to generate PDF. Please try again.')
  }
}

/**
 * Generate a simple text-based fertilizer plan (fallback)
 * @param {Object} nutrientPlan - The nutrient plan data
 * @param {string} crop - Crop name
 * @param {string} growthStage - Growth stage
 * @param {string} soilType - Soil type
 */
export const downloadFertilizerPlanText = (nutrientPlan, crop, growthStage, soilType) => {
  let content = `FERTILIZER APPLICATION PLAN\n`
  content += `Generated on: ${new Date().toLocaleDateString('en-IN')}\n`
  content += `${'='.repeat(50)}\n\n`
  
  content += `CROP INFORMATION\n`
  content += `Crop: ${crop}\n`
  content += `Growth Stage: ${growthStage}\n`
  content += `Soil Type: ${soilType}\n\n`
  
  content += `${'='.repeat(50)}\n`
  content += `NPK REQUIREMENTS (MACRONUTRIENTS)\n`
  content += `${'='.repeat(50)}\n\n`
  
  nutrientPlan.macronutrients.forEach((nutrient, i) => {
    content += `${i + 1}. ${nutrient.name}\n`
    content += `   Current Level: ${nutrient.current}\n`
    content += `   Required: ${nutrient.required}\n`
    content += `   Source: ${nutrient.source}\n`
    content += `   Dosage: ${nutrient.dosage}\n`
    content += `   Timing: ${nutrient.timing}\n`
    content += `   Deficiency Symptoms:\n`
    nutrient.deficiencySymptoms.forEach(s => content += `     - ${s}\n`)
    content += `\n`
  })
  
  content += `${'='.repeat(50)}\n`
  content += `MICRONUTRIENTS\n`
  content += `${'='.repeat(50)}\n\n`
  
  nutrientPlan.micronutrients.forEach((nutrient, i) => {
    content += `${i + 1}. ${nutrient.name} - Status: ${nutrient.status}\n`
    content += `   Recommendation: ${nutrient.recommendation}\n`
    content += `   Application: ${nutrient.application}\n\n`
  })
  
  content += `${'='.repeat(50)}\n`
  content += `ORGANIC FERTILIZER OPTIONS\n`
  content += `${'='.repeat(50)}\n\n`
  
  nutrientPlan.organicOptions.forEach((option, i) => {
    content += `${i + 1}. ${option.name}\n`
    content += `   Quantity: ${option.quantity}\n`
    content += `   Benefits:\n`
    option.benefits.forEach(b => content += `     - ${b}\n`)
    content += `   Application: ${option.application}\n\n`
  })
  
  content += `${'='.repeat(50)}\n`
  content += `IMPORTANT WARNINGS\n`
  content += `${'='.repeat(50)}\n\n`
  
  nutrientPlan.warnings.forEach((w, i) => content += `${i + 1}. ${w}\n`)
  
  content += `\n${'='.repeat(50)}\n`
  content += `This plan is generated by AgroGuard AI.\n`
  content += `Always consult with local agricultural experts.\n`
  
  // Create blob and download
  const blob = new Blob([content], { type: 'text/plain' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = `Fertilizer_Plan_${crop}_${new Date().toLocaleDateString('en-IN').replace(/\//g, '-')}.txt`
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
  URL.revokeObjectURL(url)
}
