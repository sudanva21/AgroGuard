import { jsPDF } from 'jspdf'
import html2canvas from 'html2canvas'

/**
 * Generate and download treatment plan PDF with multi-language support
 * @param {Object} treatmentData - Treatment data object
 * @param {string} disease - Disease name
 * @param {string} treatmentType - Treatment type ('chemical' or 'organic')
 * @param {Function} translate - Translation function
 * @param {string} currentLangCode - Current language code
 */
export const downloadTreatmentPDF = async (treatmentData, disease, treatmentType, translate, currentLangCode) => {
  // If no translate function provided, use identity function
  const translateFn = translate || ((text) => Promise.resolve(text))
  
  // Translate all text
  const [
    titleText,
    generatedText,
    treatmentTypeText,
    chemicalText,
    organicText,
    timingText,
    preharvestText,
    recommendedText,
    govtApprovedText,
    dosageText,
    applicationText,
    frequencyText,
    waterText,
    preventiveText,
    footerText,
    translatedDisease,
    translatedTiming,
    translatedPreharvest
  ] = await Promise.all([
    translateFn('Treatment Plan'),
    translateFn('Generated'),
    translateFn('Treatment Type'),
    translateFn('Chemical Control'),
    translateFn('Organic Control'),
    translateFn('Application Timing'),
    translateFn('Pre-harvest Interval'),
    translateFn('Recommended Products'),
    translateFn('Govt Approved'),
    translateFn('Dosage'),
    translateFn('Application'),
    translateFn('Frequency'),
    translateFn('Water Required'),
    translateFn('Preventive & Cultural Practices'),
    translateFn('Generated by AgriCare - Your Smart Farming Assistant'),
    translateFn(disease),
    translateFn(treatmentData.timing || ''),
    translateFn(treatmentData.preharvest || '')
  ])
  
  // Translate treatments
  const treatments = treatmentData[treatmentType] || []
  const translatedTreatments = await Promise.all(
    treatments.map(async (t) => ({
      ...t,
      name: await translateFn(t.name),
      price: await translateFn(t.price),
      dosage: await translateFn(t.dosage),
      application: await translateFn(t.application),
      frequency: await translateFn(t.frequency),
      waterRequired: await translateFn(t.waterRequired)
    }))
  )
  
  // Translate preventive measures
  const translatedPreventive = await Promise.all(
    (treatmentData.preventive || []).map(p => translateFn(p))
  )
  
  // Create HTML content
  const currentDate = new Date().toLocaleDateString(currentLangCode || 'en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
  
  const htmlContent = `
    <div id="pdf-content" style="width: 794px; padding: 40px; font-family: Arial, sans-serif; background: white;">
      <!-- Header -->
      <div style="background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%); color: white; padding: 30px; border-radius: 10px; margin-bottom: 30px; text-align: center;">
        <h1 style="margin: 0 0 10px 0; font-size: 32px;">${titleText}</h1>
        <h2 style="margin: 0; font-size: 24px; font-weight: normal;">${translatedDisease}</h2>
        <p style="margin: 15px 0 0 0; font-size: 14px; opacity: 0.9;">${generatedText}: ${currentDate}</p>
      </div>
      
      <!-- Treatment Type -->
      <div style="background: #f0fdf4; padding: 15px 20px; border-radius: 8px; margin-bottom: 20px;">
        <p style="margin: 0; font-size: 16px; font-weight: bold;">
          ${treatmentTypeText}: <span style="color: #16a34a;">${treatmentType === 'chemical' ? chemicalText : organicText}</span>
        </p>
      </div>
      
      <!-- Timing Warning -->
      ${treatmentData.timing ? `
      <div style="background: #fef3c7; border-left: 4px solid #f59e0b; padding: 15px 20px; margin-bottom: 20px; border-radius: 4px;">
        <p style="margin: 0 0 8px 0; font-weight: bold; color: #92400e;">⚠️ ${timingText}</p>
        <p style="margin: 0; color: #78350f;">${translatedTiming}</p>
        ${treatmentData.preharvest ? `<p style="margin: 10px 0 0 0; color: #78350f;"><strong>${preharvestText}:</strong> ${translatedPreharvest}</p>` : ''}
      </div>
      ` : ''}
      
      <!-- Products -->
      <h3 style="color: #166534; margin: 30px 0 15px 0; font-size: 20px;">${recommendedText}</h3>
      ${translatedTreatments.map((treatment, idx) => `
        <div style="border: 2px solid #22c55e; border-radius: 8px; padding: 20px; margin-bottom: 15px; page-break-inside: avoid;">
          <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 15px;">
            <div>
              <h4 style="margin: 0 0 5px 0; color: #1f2937; font-size: 18px;">${treatment.name}</h4>
              <p style="margin: 0; color: #16a34a; font-size: 20px; font-weight: bold;">${treatment.price}</p>
            </div>
            ${treatment.govtApproved ? `<span style="background: #dcfce7; color: #166534; padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: bold;">✓ ${govtApprovedText}</span>` : ''}
          </div>
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 15px;">
            <div style="background: #f3f4f6; padding: 10px; border-radius: 6px;">
              <p style="margin: 0 0 4px 0; font-size: 12px; color: #6b7280; font-weight: bold;">${dosageText}</p>
              <p style="margin: 0; color: #1f2937; font-size: 14px;">${treatment.dosage}</p>
            </div>
            <div style="background: #f3f4f6; padding: 10px; border-radius: 6px;">
              <p style="margin: 0 0 4px 0; font-size: 12px; color: #6b7280; font-weight: bold;">${applicationText}</p>
              <p style="margin: 0; color: #1f2937; font-size: 14px;">${treatment.application}</p>
            </div>
            <div style="background: #f3f4f6; padding: 10px; border-radius: 6px;">
              <p style="margin: 0 0 4px 0; font-size: 12px; color: #6b7280; font-weight: bold;">${frequencyText}</p>
              <p style="margin: 0; color: #1f2937; font-size: 14px;">${treatment.frequency}</p>
            </div>
            <div style="background: #f3f4f6; padding: 10px; border-radius: 6px;">
              <p style="margin: 0 0 4px 0; font-size: 12px; color: #6b7280; font-weight: bold;">${waterText}</p>
              <p style="margin: 0; color: #1f2937; font-size: 14px;">${treatment.waterRequired}</p>
            </div>
          </div>
        </div>
      `).join('')}
      
      <!-- Preventive Measures -->
      ${translatedPreventive.length > 0 ? `
      <h3 style="color: #166534; margin: 30px 0 15px 0; font-size: 20px;">${preventiveText}</h3>
      <div style="background: #f0fdf4; border-radius: 8px; padding: 20px;">
        ${translatedPreventive.map((practice, idx) => `
          <div style="display: flex; align-items: start; margin-bottom: 12px;">
            <span style="color: #16a34a; margin-right: 10px; font-size: 18px;">✓</span>
            <p style="margin: 0; color: #1f2937; line-height: 1.6;">${practice}</p>
          </div>
        `).join('')}
      </div>
      ` : ''}
      
      <!-- Footer -->
      <div style="margin-top: 40px; padding-top: 20px; border-top: 2px solid #e5e7eb; text-align: center;">
        <p style="margin: 0; color: #6b7280; font-size: 12px; font-style: italic;">${footerText}</p>
      </div>
    </div>
  `
  
  // Create temporary container
  const container = document.createElement('div')
  container.innerHTML = htmlContent
  container.style.position = 'absolute'
  container.style.left = '-9999px'
  document.body.appendChild(container)
  
  try {
    // Convert HTML to canvas
    const canvas = await html2canvas(container.querySelector('#pdf-content'), {
      scale: 2,
      useCORS: true,
      logging: false,
      backgroundColor: '#ffffff'
    })
    
    // Create PDF
    const doc = new jsPDF('p', 'mm', 'a4')
    const imgWidth = 210 // A4 width in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width
    
    // Add image to PDF
    const imgData = canvas.toDataURL('image/png')
    let position = 0
    
    // Handle multi-page if content is too long
    const pageHeight = 297 // A4 height in mm
    let heightLeft = imgHeight
    
    doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
    heightLeft -= pageHeight
    
    while (heightLeft > 0) {
      position = heightLeft - imgHeight
      doc.addPage()
      doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
      heightLeft -= pageHeight
    }
    
    // Save PDF
    const fileName = `treatment-plan-${disease.replace(/\s+/g, '-').toLowerCase()}-${Date.now()}.pdf`
    doc.save(fileName)
  } catch (error) {
    console.error('Error generating PDF:', error)
    throw error
  } finally {
    // Clean up
    document.body.removeChild(container)
  }
}

export default {
  downloadTreatmentPDF
}
